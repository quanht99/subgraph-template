// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class ExampleEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ExampleEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ExampleEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ExampleEntity", id.toString(), this);
    }
  }

  static load(id: string): ExampleEntity | null {
    return changetype<ExampleEntity | null>(store.get("ExampleEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get previousOwner(): Bytes {
    let value = this.get("previousOwner");
    return value!.toBytes();
  }

  set previousOwner(value: Bytes) {
    this.set("previousOwner", Value.fromBytes(value));
  }

  get newOwner(): Bytes {
    let value = this.get("newOwner");
    return value!.toBytes();
  }

  set newOwner(value: Bytes) {
    this.set("newOwner", Value.fromBytes(value));
  }
}

export class BuyTicketEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BuyTicketEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type BuyTicketEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("BuyTicketEntity", id.toString(), this);
    }
  }

  static load(id: string): BuyTicketEntity | null {
    return changetype<BuyTicketEntity | null>(store.get("BuyTicketEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value!.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get ticket_id(): BigInt {
    let value = this.get("ticket_id");
    return value!.toBigInt();
  }

  set ticket_id(value: BigInt) {
    this.set("ticket_id", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get quantity(): BigInt {
    let value = this.get("quantity");
    return value!.toBigInt();
  }

  set quantity(value: BigInt) {
    this.set("quantity", Value.fromBigInt(value));
  }

  get pool_contract(): string {
    let value = this.get("pool_contract");
    return value!.toString();
  }

  set pool_contract(value: string) {
    this.set("pool_contract", Value.fromString(value));
  }

  get block_number(): BigInt {
    let value = this.get("block_number");
    return value!.toBigInt();
  }

  set block_number(value: BigInt) {
    this.set("block_number", Value.fromBigInt(value));
  }

  get created_at(): BigInt {
    let value = this.get("created_at");
    return value!.toBigInt();
  }

  set created_at(value: BigInt) {
    this.set("created_at", Value.fromBigInt(value));
  }
}

export class PoolIDOEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoolIDOEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PoolIDOEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PoolIDOEntity", id.toString(), this);
    }
  }

  static load(id: string): PoolIDOEntity | null {
    return changetype<PoolIDOEntity | null>(store.get("PoolIDOEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get registed_by(): Bytes {
    let value = this.get("registed_by");
    return value!.toBytes();
  }

  set registed_by(value: Bytes) {
    this.set("registed_by", Value.fromBytes(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    return value!.toBytes();
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get ticket(): Bytes {
    let value = this.get("ticket");
    return value!.toBytes();
  }

  set ticket(value: Bytes) {
    this.set("ticket", Value.fromBytes(value));
  }

  get vesting(): Bytes {
    let value = this.get("vesting");
    return value!.toBytes();
  }

  set vesting(value: Bytes) {
    this.set("vesting", Value.fromBytes(value));
  }

  get pool_id(): BigInt {
    let value = this.get("pool_id");
    return value!.toBigInt();
  }

  set pool_id(value: BigInt) {
    this.set("pool_id", Value.fromBigInt(value));
  }

  get block_number(): BigInt {
    let value = this.get("block_number");
    return value!.toBigInt();
  }

  set block_number(value: BigInt) {
    this.set("block_number", Value.fromBigInt(value));
  }

  get created_at(): BigInt {
    let value = this.get("created_at");
    return value!.toBigInt();
  }

  set created_at(value: BigInt) {
    this.set("created_at", Value.fromBigInt(value));
  }
}

export class AdminEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AdminEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AdminEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AdminEntity", id.toString(), this);
    }
  }

  static load(id: string): AdminEntity | null {
    return changetype<AdminEntity | null>(store.get("AdminEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get status(): boolean {
    let value = this.get("status");
    return value!.toBoolean();
  }

  set status(value: boolean) {
    this.set("status", Value.fromBoolean(value));
  }

  get tx_hash(): Bytes {
    let value = this.get("tx_hash");
    return value!.toBytes();
  }

  set tx_hash(value: Bytes) {
    this.set("tx_hash", Value.fromBytes(value));
  }

  get added_by(): Bytes {
    let value = this.get("added_by");
    return value!.toBytes();
  }

  set added_by(value: Bytes) {
    this.set("added_by", Value.fromBytes(value));
  }

  get created_at(): BigInt {
    let value = this.get("created_at");
    return value!.toBigInt();
  }

  set created_at(value: BigInt) {
    this.set("created_at", Value.fromBigInt(value));
  }
}
