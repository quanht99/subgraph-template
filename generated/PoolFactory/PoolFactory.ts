// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddAdmin extends ethereum.Event {
  get params(): AddAdmin__Params {
    return new AddAdmin__Params(this);
  }
}

export class AddAdmin__Params {
  _event: AddAdmin;

  constructor(event: AddAdmin) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PoolCreated extends ethereum.Event {
  get params(): PoolCreated__Params {
    return new PoolCreated__Params(this);
  }
}

export class PoolCreated__Params {
  _event: PoolCreated;

  constructor(event: PoolCreated) {
    this._event = event;
  }

  get registedBy(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get ticket(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get vesting(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get pool(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get poolId(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class RemoveAdmin extends ethereum.Event {
  get params(): RemoveAdmin__Params {
    return new RemoveAdmin__Params(this);
  }
}

export class RemoveAdmin__Params {
  _event: RemoveAdmin;

  constructor(event: RemoveAdmin) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class UpdateAdmin extends ethereum.Event {
  get params(): UpdateAdmin__Params {
    return new UpdateAdmin__Params(this);
  }
}

export class UpdateAdmin__Params {
  _event: UpdateAdmin;

  constructor(event: UpdateAdmin) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get status(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class UpdateInformation extends ethereum.Event {
  get params(): UpdateInformation__Params {
    return new UpdateInformation__Params(this);
  }
}

export class UpdateInformation__Params {
  _event: UpdateInformation;

  constructor(event: UpdateInformation) {
    this._event = event;
  }

  get offeredCurrency(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get vesting(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get name(): string {
    return this._event.parameters[2].value.toString();
  }

  get symbol(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class PoolFactory extends ethereum.SmartContract {
  static bind(address: Address): PoolFactory {
    return new PoolFactory("PoolFactory", address);
  }

  admin(param0: Address): boolean {
    let result = super.call("admin", "admin(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_admin(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("admin", "admin(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  allPools(param0: BigInt): Address {
    let result = super.call("allPools", "allPools(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_allPools(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("allPools", "allPools(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  allPoolsLength(): BigInt {
    let result = super.call("allPoolsLength", "allPoolsLength():(uint256)", []);

    return result[0].toBigInt();
  }

  try_allPoolsLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allPoolsLength",
      "allPoolsLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allTickets(param0: BigInt): Address {
    let result = super.call("allTickets", "allTickets(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_allTickets(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("allTickets", "allTickets(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  allTicketsLength(): BigInt {
    let result = super.call(
      "allTicketsLength",
      "allTicketsLength():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_allTicketsLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allTicketsLength",
      "allTicketsLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCreatedPoolsByToken(_creator: Address, _token: Address): Array<Address> {
    let result = super.call(
      "getCreatedPoolsByToken",
      "getCreatedPoolsByToken(address,address):(address[])",
      [ethereum.Value.fromAddress(_creator), ethereum.Value.fromAddress(_token)]
    );

    return result[0].toAddressArray();
  }

  try_getCreatedPoolsByToken(
    _creator: Address,
    _token: Address
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getCreatedPoolsByToken",
      "getCreatedPoolsByToken(address,address):(address[])",
      [ethereum.Value.fromAddress(_creator), ethereum.Value.fromAddress(_token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getCreatedPoolsLengthByToken(_creator: Address, _token: Address): BigInt {
    let result = super.call(
      "getCreatedPoolsLengthByToken",
      "getCreatedPoolsLengthByToken(address,address):(uint256)",
      [ethereum.Value.fromAddress(_creator), ethereum.Value.fromAddress(_token)]
    );

    return result[0].toBigInt();
  }

  try_getCreatedPoolsLengthByToken(
    _creator: Address,
    _token: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCreatedPoolsLengthByToken",
      "getCreatedPoolsLengthByToken(address,address):(uint256)",
      [ethereum.Value.fromAddress(_creator), ethereum.Value.fromAddress(_token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCreatedTicketsByPool(_pool: Address): Address {
    let result = super.call(
      "getCreatedTicketsByPool",
      "getCreatedTicketsByPool(address):(address)",
      [ethereum.Value.fromAddress(_pool)]
    );

    return result[0].toAddress();
  }

  try_getCreatedTicketsByPool(_pool: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getCreatedTicketsByPool",
      "getCreatedTicketsByPool(address):(address)",
      [ethereum.Value.fromAddress(_pool)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPools(param0: Address, param1: Address, param2: BigInt): Address {
    let result = super.call(
      "getPools",
      "getPools(address,address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );

    return result[0].toAddress();
  }

  try_getPools(
    param0: Address,
    param1: Address,
    param2: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getPools",
      "getPools(address,address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getTickets(param0: Address): Address {
    let result = super.call("getTickets", "getTickets(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toAddress();
  }

  try_getTickets(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("getTickets", "getTickets(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  offeredCurrency(): Address {
    let result = super.call(
      "offeredCurrency",
      "offeredCurrency():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_offeredCurrency(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "offeredCurrency",
      "offeredCurrency():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  vesting(): Address {
    let result = super.call("vesting", "vesting():(address)", []);

    return result[0].toAddress();
  }

  try_vesting(): ethereum.CallResult<Address> {
    let result = super.tryCall("vesting", "vesting():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _vesting(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _offerCurrency(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _name(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddAdminCall extends ethereum.Call {
  get inputs(): AddAdminCall__Inputs {
    return new AddAdminCall__Inputs(this);
  }

  get outputs(): AddAdminCall__Outputs {
    return new AddAdminCall__Outputs(this);
  }
}

export class AddAdminCall__Inputs {
  _call: AddAdminCall;

  constructor(call: AddAdminCall) {
    this._call = call;
  }

  get _AddAdmin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddAdminCall__Outputs {
  _call: AddAdminCall;

  constructor(call: AddAdminCall) {
    this._call = call;
  }
}

export class RegisterPoolAndTicketCall extends ethereum.Call {
  get inputs(): RegisterPoolAndTicketCall__Inputs {
    return new RegisterPoolAndTicketCall__Inputs(this);
  }

  get outputs(): RegisterPoolAndTicketCall__Outputs {
    return new RegisterPoolAndTicketCall__Outputs(this);
  }
}

export class RegisterPoolAndTicketCall__Inputs {
  _call: RegisterPoolAndTicketCall;

  constructor(call: RegisterPoolAndTicketCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amountIDO(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _openTime(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _duration(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _ticketCloseTime(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _ticketPrice(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _cliff(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _durationVesting(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get _TGE(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }

  get _uri(): string {
    return this._call.inputValues[9].value.toString();
  }
}

export class RegisterPoolAndTicketCall__Outputs {
  _call: RegisterPoolAndTicketCall;

  constructor(call: RegisterPoolAndTicketCall) {
    this._call = call;
  }
}

export class RemoveAdminCall extends ethereum.Call {
  get inputs(): RemoveAdminCall__Inputs {
    return new RemoveAdminCall__Inputs(this);
  }

  get outputs(): RemoveAdminCall__Outputs {
    return new RemoveAdminCall__Outputs(this);
  }
}

export class RemoveAdminCall__Inputs {
  _call: RemoveAdminCall;

  constructor(call: RemoveAdminCall) {
    this._call = call;
  }

  get _RemoveAdmin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveAdminCall__Outputs {
  _call: RemoveAdminCall;

  constructor(call: RemoveAdminCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateInformationCall extends ethereum.Call {
  get inputs(): UpdateInformationCall__Inputs {
    return new UpdateInformationCall__Inputs(this);
  }

  get outputs(): UpdateInformationCall__Outputs {
    return new UpdateInformationCall__Outputs(this);
  }
}

export class UpdateInformationCall__Inputs {
  _call: UpdateInformationCall;

  constructor(call: UpdateInformationCall) {
    this._call = call;
  }

  get _vesting(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _offeredCurrency(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _name(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class UpdateInformationCall__Outputs {
  _call: UpdateInformationCall;

  constructor(call: UpdateInformationCall) {
    this._call = call;
  }
}
