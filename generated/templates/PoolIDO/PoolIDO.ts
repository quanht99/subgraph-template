// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class BuyTicket extends ethereum.Event {
  get params(): BuyTicket__Params {
    return new BuyTicket__Params(this);
  }
}

export class BuyTicket__Params {
  _event: BuyTicket;

  constructor(event: BuyTicket) {
    this._event = event;
  }

  get _to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _id(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _quantity(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _maxQuantity(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class CreateVestingSchedule extends ethereum.Event {
  get params(): CreateVestingSchedule__Params {
    return new CreateVestingSchedule__Params(this);
  }
}

export class CreateVestingSchedule__Params {
  _event: CreateVestingSchedule;

  constructor(event: CreateVestingSchedule) {
    this._event = event;
  }

  get _user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _amountIDOtoken(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _amountUSDC(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _idTicket(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _totalTicket(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class MintTicket extends ethereum.Event {
  get params(): MintTicket__Params {
    return new MintTicket__Params(this);
  }
}

export class MintTicket__Params {
  _event: MintTicket;

  constructor(event: MintTicket) {
    this._event = event;
  }

  get _to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _totalStaked(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _id(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _quantity(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PoolCreated extends ethereum.Event {
  get params(): PoolCreated__Params {
    return new PoolCreated__Params(this);
  }
}

export class PoolCreated__Params {
  _event: PoolCreated;

  constructor(event: PoolCreated) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get openTime(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get closeTime(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get offeredCurrency(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get wallet(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[5].value.toAddress();
  }
}

export class RefundedIcoToken extends ethereum.Event {
  get params(): RefundedIcoToken__Params {
    return new RefundedIcoToken__Params(this);
  }
}

export class RefundedIcoToken__Params {
  _event: RefundedIcoToken;

  constructor(event: RefundedIcoToken) {
    this._event = event;
  }

  get wallet(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SetCloseTime extends ethereum.Event {
  get params(): SetCloseTime__Params {
    return new SetCloseTime__Params(this);
  }
}

export class SetCloseTime__Params {
  _event: SetCloseTime;

  constructor(event: SetCloseTime) {
    this._event = event;
  }

  get _closeTime(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class SetOpenTime extends ethereum.Event {
  get params(): SetOpenTime__Params {
    return new SetOpenTime__Params(this);
  }
}

export class SetOpenTime__Params {
  _event: SetOpenTime;

  constructor(event: SetOpenTime) {
    this._event = event;
  }

  get _openTime(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class SetPoolExtentions extends ethereum.Event {
  get params(): SetPoolExtentions__Params {
    return new SetPoolExtentions__Params(this);
  }
}

export class SetPoolExtentions__Params {
  _event: SetPoolExtentions;

  constructor(event: SetPoolExtentions) {
    this._event = event;
  }

  get _whitelist(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class SetUpVestingInformation extends ethereum.Event {
  get params(): SetUpVestingInformation__Params {
    return new SetUpVestingInformation__Params(this);
  }
}

export class SetUpVestingInformation__Params {
  _event: SetUpVestingInformation;

  constructor(event: SetUpVestingInformation) {
    this._event = event;
  }

  get _start(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _cliff(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _duration(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _TGE(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class SwapToToken extends ethereum.Event {
  get params(): SwapToToken__Params {
    return new SwapToToken__Params(this);
  }
}

export class SwapToToken__Params {
  _event: SwapToToken;

  constructor(event: SwapToToken) {
    this._event = event;
  }

  get _user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _amountIDOtoken(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _amountUSDC(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _idTicket(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get _totalTicket(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class UpdateRoot extends ethereum.Event {
  get params(): UpdateRoot__Params {
    return new UpdateRoot__Params(this);
  }
}

export class UpdateRoot__Params {
  _event: UpdateRoot;

  constructor(event: UpdateRoot) {
    this._event = event;
  }

  get _root(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class PoolIDO extends ethereum.SmartContract {
  static bind(address: Address): PoolIDO {
    return new PoolIDO("PoolIDO", address);
  }

  USDC(): Address {
    let result = super.call("USDC", "USDC():(address)", []);

    return result[0].toAddress();
  }

  try_USDC(): ethereum.CallResult<Address> {
    let result = super.tryCall("USDC", "USDC():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  amountIDOToken(): BigInt {
    let result = super.call("amountIDOToken", "amountIDOToken():(uint256)", []);

    return result[0].toBigInt();
  }

  try_amountIDOToken(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "amountIDOToken",
      "amountIDOToken():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  closeTime(): BigInt {
    let result = super.call("closeTime", "closeTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_closeTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("closeTime", "closeTime():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  fee(): BigInt {
    let result = super.call("fee", "fee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_fee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("fee", "fee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  fundingWallet(): Address {
    let result = super.call("fundingWallet", "fundingWallet():(address)", []);

    return result[0].toAddress();
  }

  try_fundingWallet(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "fundingWallet",
      "fundingWallet():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRandomNumber(): Bytes {
    let result = super.call(
      "getRandomNumber",
      "getRandomNumber():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_getRandomNumber(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRandomNumber",
      "getRandomNumber():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  init(): boolean {
    let result = super.call("init", "init():(bool)", []);

    return result[0].toBoolean();
  }

  try_init(): ethereum.CallResult<boolean> {
    let result = super.tryCall("init", "init():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isFinalized(): boolean {
    let result = super.call("isFinalized", "isFinalized():(bool)", []);

    return result[0].toBoolean();
  }

  try_isFinalized(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isFinalized", "isFinalized():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  linkAddr(): Address {
    let result = super.call("linkAddr", "linkAddr():(address)", []);

    return result[0].toAddress();
  }

  try_linkAddr(): ethereum.CallResult<Address> {
    let result = super.tryCall("linkAddr", "linkAddr():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  onERC1155BatchReceived(
    operator: Address,
    from: Address,
    ids: Array<BigInt>,
    values: Array<BigInt>,
    data: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigIntArray(ids),
        ethereum.Value.fromUnsignedBigIntArray(values),
        ethereum.Value.fromBytes(data)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155BatchReceived(
    operator: Address,
    from: Address,
    ids: Array<BigInt>,
    values: Array<BigInt>,
    data: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigIntArray(ids),
        ethereum.Value.fromUnsignedBigIntArray(values),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC1155Received(
    operator: Address,
    from: Address,
    id: BigInt,
    value: BigInt,
    data: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(id),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromBytes(data)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155Received(
    operator: Address,
    from: Address,
    id: BigInt,
    value: BigInt,
    data: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(id),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  openTime(): BigInt {
    let result = super.call("openTime", "openTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_openTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("openTime", "openTime():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  randomResult(): BigInt {
    let result = super.call("randomResult", "randomResult():(uint256)", []);

    return result[0].toBigInt();
  }

  try_randomResult(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("randomResult", "randomResult():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  root(): Bytes {
    let result = super.call("root", "root():(bytes32)", []);

    return result[0].toBytes();
  }

  try_root(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("root", "root():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  ticket(): Address {
    let result = super.call("ticket", "ticket():(address)", []);

    return result[0].toAddress();
  }

  try_ticket(): ethereum.CallResult<Address> {
    let result = super.tryCall("ticket", "ticket():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ticketCloseTime(): BigInt {
    let result = super.call(
      "ticketCloseTime",
      "ticketCloseTime():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_ticketCloseTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ticketCloseTime",
      "ticketCloseTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ticketPrice(): BigInt {
    let result = super.call("ticketPrice", "ticketPrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_ticketPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("ticketPrice", "ticketPrice():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenSold(): BigInt {
    let result = super.call("tokenSold", "tokenSold():(uint256)", []);

    return result[0].toBigInt();
  }

  try_tokenSold(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tokenSold", "tokenSold():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  useWhitelist(): boolean {
    let result = super.call("useWhitelist", "useWhitelist():(bool)", []);

    return result[0].toBoolean();
  }

  try_useWhitelist(): ethereum.CallResult<boolean> {
    let result = super.tryCall("useWhitelist", "useWhitelist():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  userPurchased(param0: Address): BigInt {
    let result = super.call(
      "userPurchased",
      "userPurchased(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_userPurchased(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userPurchased",
      "userPurchased(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userTicket(param0: BigInt, param1: Address): BigInt {
    let result = super.call(
      "userTicket",
      "userTicket(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_userTicket(param0: BigInt, param1: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userTicket",
      "userTicket(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userUSDC(param0: Address): BigInt {
    let result = super.call("userUSDC", "userUSDC(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_userUSDC(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("userUSDC", "userUSDC(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vesting(): Address {
    let result = super.call("vesting", "vesting():(address)", []);

    return result[0].toAddress();
  }

  try_vesting(): ethereum.CallResult<Address> {
    let result = super.tryCall("vesting", "vesting():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  vestingCliffTime(): BigInt {
    let result = super.call(
      "vestingCliffTime",
      "vestingCliffTime():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_vestingCliffTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "vestingCliffTime",
      "vestingCliffTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vestingDuration(): BigInt {
    let result = super.call(
      "vestingDuration",
      "vestingDuration():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_vestingDuration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "vestingDuration",
      "vestingDuration():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vestingStartTime(): BigInt {
    let result = super.call(
      "vestingStartTime",
      "vestingStartTime():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_vestingStartTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "vestingStartTime",
      "vestingStartTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vestingTGE(): BigInt {
    let result = super.call("vestingTGE", "vestingTGE():(uint128)", []);

    return result[0].toBigInt();
  }

  try_vestingTGE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("vestingTGE", "vestingTGE():(uint128)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vrfCoord(): Address {
    let result = super.call("vrfCoord", "vrfCoord():(address)", []);

    return result[0].toAddress();
  }

  try_vrfCoord(): ethereum.CallResult<Address> {
    let result = super.tryCall("vrfCoord", "vrfCoord():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class AddressInitializeCall extends ethereum.Call {
  get inputs(): AddressInitializeCall__Inputs {
    return new AddressInitializeCall__Inputs(this);
  }

  get outputs(): AddressInitializeCall__Outputs {
    return new AddressInitializeCall__Outputs(this);
  }
}

export class AddressInitializeCall__Inputs {
  _call: AddressInitializeCall;

  constructor(call: AddressInitializeCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _usdc(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _ticketAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _vestingAddress(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class AddressInitializeCall__Outputs {
  _call: AddressInitializeCall;

  constructor(call: AddressInitializeCall) {
    this._call = call;
  }
}

export class BuyTicketCall extends ethereum.Call {
  get inputs(): BuyTicketCall__Inputs {
    return new BuyTicketCall__Inputs(this);
  }

  get outputs(): BuyTicketCall__Outputs {
    return new BuyTicketCall__Outputs(this);
  }
}

export class BuyTicketCall__Inputs {
  _call: BuyTicketCall;

  constructor(call: BuyTicketCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _quantity(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _maxQuantity(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _minQuantity(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _id(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get proof(): Array<Bytes> {
    return this._call.inputValues[6].value.toBytesArray();
  }
}

export class BuyTicketCall__Outputs {
  _call: BuyTicketCall;

  constructor(call: BuyTicketCall) {
    this._call = call;
  }
}

export class CreateVestingScheduleCall extends ethereum.Call {
  get inputs(): CreateVestingScheduleCall__Inputs {
    return new CreateVestingScheduleCall__Inputs(this);
  }

  get outputs(): CreateVestingScheduleCall__Outputs {
    return new CreateVestingScheduleCall__Outputs(this);
  }
}

export class CreateVestingScheduleCall__Inputs {
  _call: CreateVestingScheduleCall;

  constructor(call: CreateVestingScheduleCall) {
    this._call = call;
  }

  get _amountIDOtoken(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amountUSDC(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _idTicket(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _totalTicket(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get proof(): Array<Bytes> {
    return this._call.inputValues[4].value.toBytesArray();
  }
}

export class CreateVestingScheduleCall__Outputs {
  _call: CreateVestingScheduleCall;

  constructor(call: CreateVestingScheduleCall) {
    this._call = call;
  }
}

export class GetRandomNumberCall extends ethereum.Call {
  get inputs(): GetRandomNumberCall__Inputs {
    return new GetRandomNumberCall__Inputs(this);
  }

  get outputs(): GetRandomNumberCall__Outputs {
    return new GetRandomNumberCall__Outputs(this);
  }
}

export class GetRandomNumberCall__Inputs {
  _call: GetRandomNumberCall;

  constructor(call: GetRandomNumberCall) {
    this._call = call;
  }
}

export class GetRandomNumberCall__Outputs {
  _call: GetRandomNumberCall;

  constructor(call: GetRandomNumberCall) {
    this._call = call;
  }

  get requestId(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RawFulfillRandomnessCall extends ethereum.Call {
  get inputs(): RawFulfillRandomnessCall__Inputs {
    return new RawFulfillRandomnessCall__Inputs(this);
  }

  get outputs(): RawFulfillRandomnessCall__Outputs {
    return new RawFulfillRandomnessCall__Outputs(this);
  }
}

export class RawFulfillRandomnessCall__Inputs {
  _call: RawFulfillRandomnessCall;

  constructor(call: RawFulfillRandomnessCall) {
    this._call = call;
  }

  get requestId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get randomness(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RawFulfillRandomnessCall__Outputs {
  _call: RawFulfillRandomnessCall;

  constructor(call: RawFulfillRandomnessCall) {
    this._call = call;
  }
}

export class RefundRemainingUSDCCall extends ethereum.Call {
  get inputs(): RefundRemainingUSDCCall__Inputs {
    return new RefundRemainingUSDCCall__Inputs(this);
  }

  get outputs(): RefundRemainingUSDCCall__Outputs {
    return new RefundRemainingUSDCCall__Outputs(this);
  }
}

export class RefundRemainingUSDCCall__Inputs {
  _call: RefundRemainingUSDCCall;

  constructor(call: RefundRemainingUSDCCall) {
    this._call = call;
  }
}

export class RefundRemainingUSDCCall__Outputs {
  _call: RefundRemainingUSDCCall;

  constructor(call: RefundRemainingUSDCCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SwapToTokenCall extends ethereum.Call {
  get inputs(): SwapToTokenCall__Inputs {
    return new SwapToTokenCall__Inputs(this);
  }

  get outputs(): SwapToTokenCall__Outputs {
    return new SwapToTokenCall__Outputs(this);
  }
}

export class SwapToTokenCall__Inputs {
  _call: SwapToTokenCall;

  constructor(call: SwapToTokenCall) {
    this._call = call;
  }

  get _amountIDOtoken(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amountUSDC(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _idTicket(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _totalTicket(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get proof(): Array<Bytes> {
    return this._call.inputValues[4].value.toBytesArray();
  }
}

export class SwapToTokenCall__Outputs {
  _call: SwapToTokenCall;

  constructor(call: SwapToTokenCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UintInitializeCall extends ethereum.Call {
  get inputs(): UintInitializeCall__Inputs {
    return new UintInitializeCall__Inputs(this);
  }

  get outputs(): UintInitializeCall__Outputs {
    return new UintInitializeCall__Outputs(this);
  }
}

export class UintInitializeCall__Inputs {
  _call: UintInitializeCall;

  constructor(call: UintInitializeCall) {
    this._call = call;
  }

  get _amountIDOtoken(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _openTime(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _duration(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _ticketCloseTime(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _ticketPrice(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class UintInitializeCall__Outputs {
  _call: UintInitializeCall;

  constructor(call: UintInitializeCall) {
    this._call = call;
  }
}

export class UpdateFundingWalletCall extends ethereum.Call {
  get inputs(): UpdateFundingWalletCall__Inputs {
    return new UpdateFundingWalletCall__Inputs(this);
  }

  get outputs(): UpdateFundingWalletCall__Outputs {
    return new UpdateFundingWalletCall__Outputs(this);
  }
}

export class UpdateFundingWalletCall__Inputs {
  _call: UpdateFundingWalletCall;

  constructor(call: UpdateFundingWalletCall) {
    this._call = call;
  }

  get _wallet(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateFundingWalletCall__Outputs {
  _call: UpdateFundingWalletCall;

  constructor(call: UpdateFundingWalletCall) {
    this._call = call;
  }
}

export class UpdatePriceTicketCall extends ethereum.Call {
  get inputs(): UpdatePriceTicketCall__Inputs {
    return new UpdatePriceTicketCall__Inputs(this);
  }

  get outputs(): UpdatePriceTicketCall__Outputs {
    return new UpdatePriceTicketCall__Outputs(this);
  }
}

export class UpdatePriceTicketCall__Inputs {
  _call: UpdatePriceTicketCall;

  constructor(call: UpdatePriceTicketCall) {
    this._call = call;
  }

  get _price(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdatePriceTicketCall__Outputs {
  _call: UpdatePriceTicketCall;

  constructor(call: UpdatePriceTicketCall) {
    this._call = call;
  }
}

export class UpdateRootCall extends ethereum.Call {
  get inputs(): UpdateRootCall__Inputs {
    return new UpdateRootCall__Inputs(this);
  }

  get outputs(): UpdateRootCall__Outputs {
    return new UpdateRootCall__Outputs(this);
  }
}

export class UpdateRootCall__Inputs {
  _call: UpdateRootCall;

  constructor(call: UpdateRootCall) {
    this._call = call;
  }

  get _root(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class UpdateRootCall__Outputs {
  _call: UpdateRootCall;

  constructor(call: UpdateRootCall) {
    this._call = call;
  }
}

export class UpdateVestingCall extends ethereum.Call {
  get inputs(): UpdateVestingCall__Inputs {
    return new UpdateVestingCall__Inputs(this);
  }

  get outputs(): UpdateVestingCall__Outputs {
    return new UpdateVestingCall__Outputs(this);
  }
}

export class UpdateVestingCall__Inputs {
  _call: UpdateVestingCall;

  constructor(call: UpdateVestingCall) {
    this._call = call;
  }

  get _start(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _cliff(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _duration(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _TGE(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class UpdateVestingCall__Outputs {
  _call: UpdateVestingCall;

  constructor(call: UpdateVestingCall) {
    this._call = call;
  }
}

export class VestingInitializeCall extends ethereum.Call {
  get inputs(): VestingInitializeCall__Inputs {
    return new VestingInitializeCall__Inputs(this);
  }

  get outputs(): VestingInitializeCall__Outputs {
    return new VestingInitializeCall__Outputs(this);
  }
}

export class VestingInitializeCall__Inputs {
  _call: VestingInitializeCall;

  constructor(call: VestingInitializeCall) {
    this._call = call;
  }

  get _start(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _cliff(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _duration(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _TGE(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class VestingInitializeCall__Outputs {
  _call: VestingInitializeCall;

  constructor(call: VestingInitializeCall) {
    this._call = call;
  }
}
